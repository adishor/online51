<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\CreditsUsage;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CreditsUsageRepository extends EntityRepository
{

    public function findAllValidUserDocuments($userId, $domainId = null, $subdomainId = null)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('p.company, d.id as id, d.name, m.id as mid, '
            . 'cu.id as cuid, cu.createdAt as unlockDate, cu.credit, cu.expireDate as date, cu.usageType, cu.title, '
            . 'sd.name as subDomain, dom.name as domain')
          ->from('AppBundle:CreditsUsage ', 'cu')
          ->join('AppBundle:Document', 'd', 'WITH', 'cu.document = d')
          ->join('Application\Sonata\MediaBundle\Entity\Media', 'm', 'WITH', 'cu.media = m')
          ->join('AppBundle:SubDomain', 'sd', 'WITH', 'd.subdomain = sd')
          ->join('AppBundle:Domain', 'dom', 'WITH', 'sd.domain = dom')
          ->join('cu.user', 'u')
          ->join('u.profile', 'p')
          ->where('cu.user = :user')
          ->setParameter('user', $userId)
          ->andWhere('cu.expireDate > :now')
          ->setParameter('now', new \DateTime)
          ->andWhere('d.deleted = FALSE')
          ->andWhere('m.deleted = FALSE')
          ->andWhere('cu.deleted = FALSE')
          ->andWhere('sd.deleted = FALSE')
          ->andWhere('dom.deleted = FALSE');
        if (null !== $domainId) {
            $queryBuilder->andWhere('sd.domain = :domain')
              ->setParameter('domain', $domainId);
        }
        if (null !== $subdomainId) {
            $queryBuilder->andWhere('sd.id = :subdomainId')
              ->setParameter('subdomainId', $subdomainId);
        }
        $queryBuilder->addOrderBy('dom.id')
          ->addOrderBy('sd.id')
          ->addOrderBy('d.id', 'DESC');

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }

    public function findAllValidUserVideos($userId, $domainId = null, $subdomainId = null)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('p.company, v.id as id, v.name, v.youtubeLink, m.id as mid, m as media, '
            . 'cu.id as cuid, cu.createdAt as unlockDate, cu.credit, cu.expireDate as date, cu.usageType, cu.title, '
            . 'sd.name as subDomain, dom.name as domain')
          ->from('AppBundle:CreditsUsage ', 'cu')
          ->join('AppBundle:Video', 'v', 'WITH', 'cu.video = v')
          ->leftJoin('Application\Sonata\MediaBundle\Entity\Media', 'm', 'WITH', 'cu.media = m')
          ->join('AppBundle:SubDomain', 'sd', 'WITH', 'v.subdomain = sd')
          ->join('AppBundle:Domain', 'dom', 'WITH', 'sd.domain = dom')
          ->join('cu.user', 'u')
          ->join('u.profile', 'p')
          ->where('cu.user = :user')
          ->setParameter('user', $userId)
          ->andWhere('cu.expireDate > :now')
          ->setParameter('now', new \DateTime)
          ->andWhere('v.deleted = FALSE')
          ->andWhere('cu.deleted = FALSE')
          ->andWhere('sd.deleted = FALSE')
          ->andWhere('dom.deleted = FALSE');
        if (null !== $domainId) {
            $queryBuilder->andWhere('sd.domain = :domain')
              ->setParameter('domain', $domainId);
        }
        if (null !== $subdomainId) {
            $queryBuilder->andWhere('sd.id = :subdomainId')
              ->setParameter('subdomainId', $subdomainId);
        }
        $queryBuilder->addOrderBy('dom.id')
          ->addOrderBy('sd.id')
          ->addOrderBy('v.id', 'DESC');

        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }

    public function findAllValidUserFormularDocuments($userId)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('p.company, f.id as id, f.name, f.slug, f.discountedCreditValue, m.id as mid, '
            . 'cu.createdAt as unlockDate, cu.credit, cu.expireDate as date, cu.usageType, cu.id as cuid, cu.title, '
            . 'cu.formConfig, cu.formHash, cu.isFormConfigFinished, '
            . 'sd.name as subDomain, dom.name as domain')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->join('AppBundle:Formular', 'f', 'WITH', 'cu.formular = f')
          ->leftJoin('Application\Sonata\MediaBundle\Entity\Media', 'm', 'WITH', 'cu.media = m')
          ->join('AppBundle:SubDomain', 'sd', 'WITH', 'f.subdomain = sd')
          ->join('AppBundle:Domain', 'dom', 'WITH', 'sd.domain = dom')
          ->join('cu.user', 'u')
          ->join('u.profile', 'p')
          ->where('cu.user = :user')
          ->setParameter('user', $userId)
          ->andWhere('cu.expireDate > :now')
          ->setParameter('now', new \DateTime)
          ->andWhere('f.deleted = FALSE')
          ->andWhere('cu.deleted = FALSE')
          ->andWhere('sd.deleted = FALSE')
          ->andWhere('dom.deleted = FALSE');
        $queryBuilder->addOrderBy('dom.id')
          ->addOrderBy('sd.id')
          ->addOrderBy('f.id', 'DESC');

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }

    public function findAllUserDocuments($userId)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('d.id as documentId, v.id as videoId, f.id as formularId, m.id as mediaId, '
            . 'd.name as documentName, v.name as videoName, f.name as formularName, '
            . 'cu.mentions, cu.createdAt as unlockDate, cu.credit, cu.expireDate, cu.usageType, cu.id as cuid, cu.title')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->leftJoin('cu.document', 'd')
          ->leftJoin('cu.video', 'v')
          ->leftJoin('cu.formular', 'f')
          ->leftJoin('cu.media', 'm')
          ->where('cu.user = :user')
          ->setParameter('user', $userId)
          ->andWhere('cu.deleted = FALSE')
          ->andWhere('cu.usageType != :usage')
          ->setParameter('usage', CreditsUsage::TYPE_EXPIRED)
          ->orderBy('unlockDate', 'DESC');

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }

    public function findAllUserFormularDocuments($userId, $mediaId = null)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('p.company, f.name, f.slug as fslug, f.discountedCreditValue, m.id as mid, '
            . 'cu.id as cuid, cu.formConfig, cu.formHash, cu.isFormConfigFinished, cu.usageType, cu.expireDate as date, cu.title, '
            . 'sd.name as subDomain, dom.name as domain')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->join('cu.formular', 'f')
          ->join('cu.user', 'u')
          ->join('u.profile', 'p')
          ->join('f.subdomain', 'sd')
          ->join('sd.domain', 'dom')
          ->leftJoin('cu.media', 'm')
          ->where('cu.user = :user')
          ->setParameter('user', $userId)
          ->andWhere('cu.deleted = FALSE')
          ->addOrderBy('cu.expireDate', 'DESC')
          ->addOrderBy('cu.createdAt', 'DESC');

        if ($mediaId !== null) {
            $queryBuilder
              ->andWhere('m.id = :mediaId')
              ->setParameter('mediaId', $mediaId);
        }

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }

    public function findAllUserExpiredCredit($userId)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('cu.mentions, cu.createdAt as unlockDate, cu.credit, cu.expireDate')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->where('cu.user = :user')
          ->setParameter('user', $userId)
          ->andWhere('cu.deleted = FALSE')
          ->andWhere('cu.usageType = :expired')
          ->setParameter('expired', CreditsUsage::TYPE_EXPIRED)
          ->orderBy('unlockDate', 'DESC');

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }

    public function findValidUserDocument($userId, $documentId)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('d.id')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->join('cu.media', 'm')
          ->join('cu.document', 'd')
          ->where('cu.user = :user')
          ->setParameter('user', $userId)
          ->andWhere('cu.expireDate > :now')
          ->setParameter('now', new \DateTime)
          ->andWhere('d.id = :document')
          ->setParameter('document', $documentId)
          ->andWhere('cu.deleted = FALSE')
          ->andWhere('m.deleted = FALSE')
          ->andWhere('d.deleted = FALSE')
        ;

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }

    public function findValidUserVideo($userId, $videoId)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('v.id')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->join('cu.media', 'm')
          ->join('cu.video', 'v')
          ->where('cu.user = :user')
          ->setParameter('user', $userId)
          ->andWhere('cu.expireDate > :now')
          ->setParameter('now', new \DateTime)
          ->andWhere('v.id = :video')
          ->setParameter('video', $videoId)
          ->andWhere('cu.deleted = FALSE')
          ->andWhere('m.deleted = FALSE')
          ->andWhere('v.deleted = FALSE')
        ;

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }

    public function findValidUserFormularDocument($userId, $documentId)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('f.id')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->join('cu.media', 'm')
          ->join('cu.formular', 'f')
          ->where('cu.user = :user')
          ->setParameter('user', $userId)
          ->andWhere('cu.expireDate > :now')
          ->setParameter('now', new \DateTime)
          ->andWhere('f.id = :document')
          ->setParameter('document', $documentId)
          ->andWhere('cu.deleted = FALSE')
          ->andWhere('m.deleted = FALSE')
        ;

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }

    public function findValidUserFormular($userId, $formularId, $formularConfig)
    {
        $formHash = md5(json_encode($userId) . json_encode($formularConfig));

        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('cu.id')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->join('cu.formular', 'f')
          ->where('cu.user = :user')
          ->setParameter('user', $userId)
          ->andWhere('cu.expireDate > :now')
          ->setParameter('now', new \DateTime)
          ->andWhere('cu.formHash = :formHash')
          ->setParameter('formHash', $formHash)
          ->andWhere('f.id = :formular')
          ->setParameter('formular', $formularId)
          ->andWhere('cu.deleted = FALSE')
          ->andWhere('f.deleted = FALSE')
        ;

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }

    public function findTotalUsedCredits($userId)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('sum(cu.credit)')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->where('cu.user = :user')
          ->andWhere('cu.usageType != :expired')
          ->andWhere('cu.deleted = FALSE')
          ->setParameter('expired', CreditsUsage::TYPE_EXPIRED)
          ->setParameter('user', $userId);

        $query = $queryBuilder->getQuery();
        $result = $query->getSingleScalarResult();

        return ($result) ? $result : 0;
    }

    public function findTotalExpiredCredits($userId)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('sum(cu.credit)')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->where('cu.user = :user')
          ->andWhere('cu.deleted = FALSE')
          ->andWhere('cu.usageType = :expired')
          ->setParameter('expired', CreditsUsage::TYPE_EXPIRED)
          ->setParameter('user', $userId);

        $query = $queryBuilder->getQuery();
        $result = $query->getSingleScalarResult();

        return ($result) ? $result : 0;
    }

    public function findOneByFormHashNotExpired($hash)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('cu')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->where('cu.formHash = :hash')
          ->setParameter('hash', $hash)
          ->andWhere('cu.expireDate > :now')
          ->setParameter('now', new \DateTime());

        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }

    public function findValidCreditsUsageForMedia($mediaId)
    {
        $queryBuilder = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('cu')
          ->from('AppBundle:CreditsUsage', 'cu')
          ->where('cu.media = :media')
          ->setParameter('media', $mediaId)
          ->andWhere('cu.expireDate > :now')
          ->setParameter('now', new \DateTime())
          ->orderBy('cu.expireDate', 'DESC');

        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }

}