<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends EntityRepository
{

    public function findValidUserDomain($userId, $domainId)
    {
        $queryBuilder = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('DISTINCT(d.id) as id')
            ->from('AppBundle:Order', 'o')
            ->join('o.domains', 'd')
            ->where('o.active = TRUE')
            ->andWhere('o.user = :user')
            ->setParameter('user', $userId)
            ->andWhere('d.id = :domain')
            ->setParameter('domain', $domainId)
            ->andWhere('o.endingDate > :now')
            ->andWhere('d.deleted = FALSE')
            ->andWhere('o.deleted = FALSE')
            ->setParameter('now', new \DateTime);

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }


    public function findAllActiveUserOrders($userId)
    {
        $queryBuilder = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:Order', 'o')
            ->where('o.active = TRUE')
            ->andWhere('o.user = :user')
            ->setParameter('user', $userId)
            ->andWhere('o.endingDate > :now')
            ->andWhere('o.subscription is not NULL')
            ->setParameter('now', new \DateTime)
            ->andWhere('o.deleted = FALSE')
            ->orderBy('o.startDate', 'DESC');

        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }

    public function findAllActiveBonusUserOrders($userId)
    {
        $queryBuilder = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:Order', 'o')
            ->where('o.active = TRUE')
            ->andWhere('o.user = :user')
            ->setParameter('user', $userId)
            ->andWhere('o.endingDate > :now')
            ->andWhere('o.subscription is NULL')
            ->setParameter('now', new \DateTime)
            ->andWhere('o.deleted = FALSE')
            ->orderBy('o.startDate', 'DESC');

        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }

    public function findAllUserOrders($userId)
    {
        $queryBuilder = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:Order', 'o')
            ->where('o.active = TRUE')
            ->andWhere('o.user = :user')
            ->setParameter('user', $userId)
            ->andWhere('o.subscription is not NULL')
            ->andWhere('o.deleted = FALSE');

        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }

    public function findAllBonusUserOrders($userId)
    {
        $queryBuilder = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:Order', 'o')
            ->where('o.active = TRUE')
            ->andWhere('o.user = :user')
            ->setParameter('user', $userId)
            ->andWhere('o.subscription is NULL')
            ->andWhere('o.deleted = FALSE');

        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }

    public function findAllPendingOrders($userId)
    {
        $queryBuilder = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:Order', 'o')
            ->where('o.firstActive = FALSE')
            ->andWhere('o.user = :user')
            ->andWhere('o.subscription IS NOT NULL')
            ->setParameter('user', $userId)
            ->andWhere('o.deleted = FALSE')
            ->orderBy('o.id', 'DESC');

        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }

    public function findAllHistoryOrders($userId)
    {
        $queryBuilder = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('o.id, s.name, o.mentions, o.startDate as unlockDate, o.creditValue as credit, o.endingDate as expireDate')
            ->from('AppBundle:Order', 'o')
            ->leftjoin('o.subscription', 's')
            ->where('o.active = TRUE')
            ->andWhere('o.user = :user')
            ->setParameter('user', $userId)
            ->andWhere('o.deleted = FALSE');

        $query = $queryBuilder->getQuery();

        return $query->getArrayResult();
    }

    public function findPendingOrdersByDomain($domainId)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder('o');
        $queryBuilder
            ->select('o')
            ->from('AppBundle:Order', 'o')
            ->join('o.domains', 'od')
            ->where($queryBuilder->expr()->eq('od.id', $domainId))
            ->andWhere('o.deleted = FALSE')
            ->andWhere('o.firstActive = FALSE');

        return $queryBuilder->getQuery()->getArrayResult();
    }


    public function findValidUserCredits($userId, $endDate = null)
    {
        if (null === $endDate) {
            $endDate = new \DateTime;
        }

        $queryBuilder = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('SUM(o.creditValue)')
            ->from('AppBundle:Order', 'o')
            ->where('o.active = TRUE')
            ->andWhere('o.user = :user')
            ->setParameter('user', $userId)
            ->andWhere('o.deleted = FALSE')
            ->andWhere('o.endingDate > :endDate')
            ->setParameter('endDate', $endDate)
            ->andWhere('o.startDate <= :endDate')
            ->setParameter('endDate', $endDate);

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
     * @param $userId
     * @return mixed
     */
    public function getOldestValidOrderByUserId($userId)
    {
        $nowDate = new \DateTime;

        $queryBuilder = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:Order', 'o')
            ->where('o.active = TRUE')
            ->andWhere('o.user = :user')
            ->setParameter('user', $userId)
            ->andWhere('o.deleted = FALSE')
            ->andWhere('o.endingDate > :endDate')
            ->setParameter('endDate', $nowDate)
            ->andWhere('o.startDate <= :endDate')
            ->setParameter('endDate', $nowDate)
            ->orderBy('o.approvedDate', 'ASC')
            ->setMaxResults(1)
        ;

        $query = $queryBuilder->getQuery();

        return $query->getSingleResult();
    }
}