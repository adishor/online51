<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Sonata\UserBundle\Entity\BaseUser as BaseUser;
use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * This file has been generated by the Sonata EasyExtends bundle.
 *
 * @link https://sonata-project.org/bundles/easy-extends
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */

/**
 * @ORM\Table(name="fos_user_user")
 * @ORM\Entity()
 * @UniqueEntity("email", message="assert.unique.email", groups={"flow_register_flow_step1"})
 * @Gedmo\SoftDeleteable(fieldName="deletedAt", timeAware=false)
 */
class User extends BaseUser
{


    /**
     *
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     *
     * @var string
     * @Assert\NotBlank(message="user.required.email", groups={"flow_register_flow_step1", "AdminRegistration", "AdminProfile", "ChangeInfo"})
     * @Assert\Email(message="assert.valid.email", groups={"flow_register_flow_step1", "AdminRegistration", "AdminProfile", "ChangeInfo"})
     */
    protected $email;

    /**
     *
     * @var string
     * @Assert\NotBlank(message="assert.required.password", groups={"flow_register_flow_step1", "resetPassword"})
     * @Assert\Length(min=6, minMessage="assert.password.length", groups={"flow_register_flow_step1", "ChangePassword", "resetPassword"})
     */
    protected $password;

    /**
     *
     * @var string
     * @Assert\Length(min=6, minMessage="assert.password.length")
     * @Assert\NotBlank(message="assert.required.password")
     */
    protected $plainPassword;

    /**
     *
     * @var string
     * @Assert\NotBlank(message="assert.required.username")
     */
    protected $username;

    /**
     *
     * @var integer
     *
     * @ORM\Column(type="integer", nullable=true, options={"default":0})
     */
    protected $creditsTotal;

    /**
     *
     * @var integer
     *
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $lastCreditUpdate;

    /**
     * @ORM\OneToMany(targetEntity="\AppBundle\Entity\Order", mappedBy="user")
     */
    protected $orders;

    /**
     * @ORM\OneToMany(targetEntity="\AppBundle\Entity\Order", mappedBy="approvedBy")
     */
    protected $approvedSubscriptions;

    /**
     * @ORM\OneToMany(targetEntity="\AppBundle\Entity\Order", mappedBy="lastModifiedBy")
     */
    protected $modifiedSubscriptions;

    /**
     *
     * @ORM\OneToMany(targetEntity="\AppBundle\Entity\CreditsUsage", mappedBy="user")
     */
    protected $userCreditsUsage;

    /**
     *
     * @var integer
     *
     * @ORM\Column(type="boolean", nullable=false, options={"default":0})
     */
    protected $deleted;

    /**
     *
     * @var \DateTime
     *
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $deletedAt;

    /**
     * @ORM\OneToOne(targetEntity="\AppBundle\Entity\Profile", mappedBy="user", cascade={"persist","remove"})
     */
    protected $profile;

    protected $registerSubscriptionId;

    protected $registerDomainIds;

    public function __construct()
    {
        parent::__construct();

        $this->deleted = FALSE;
    }

    /**
     * Get id
     *
     * @return int $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set creditsTotal
     *
     * @param integer $creditsTotal
     * @return User
     */
    public function setCreditsTotal($creditsTotal)
    {
        $this->creditsTotal = $creditsTotal;

        return $this;
    }

    /**
     * Get creditsTotal
     *
     * @return integer
     */
    public function getCreditsTotal()
    {
        return $this->creditsTotal;
    }

    /**
     * Add orders
     *
     * @param \AppBundle\Entity\Order $orders
     * @return User
     */
    public function addOrder(\AppBundle\Entity\Order $orders)
    {
        $this->orders[] = $orders;

        return $this;
    }

    /**
     * Remove orders
     *
     * @param \AppBundle\Entity\Order $orders
     */
    public function removeOrder(\AppBundle\Entity\Order $orders)
    {
        $this->orders->removeElement($orders);
    }

    /**
     * Get orders
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getOrders()
    {
        return $this->orders;
    }

    /**
     * Add approvedSubscriptions
     *
     * @param \AppBundle\Entity\Order $approvedSubscriptions
     * @return User
     */
    public function addApprovedSubscription(\AppBundle\Entity\Order $approvedSubscriptions)
    {
        $this->approvedSubscriptions[] = $approvedSubscriptions;

        return $this;
    }

    /**
     * Remove approvedSubscriptions
     *
     * @param \AppBundle\Entity\Order $approvedSubscriptions
     */
    public function removeApprovedSubscription(\AppBundle\Entity\Order $approvedSubscriptions)
    {
        $this->approvedSubscriptions->removeElement($approvedSubscriptions);
    }

    /**
     * Get approvedSubscriptions
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getApprovedSubscriptions()
    {
        return $this->approvedSubscriptions;
    }

    /**
     * Add userCreditsUsage
     *
     * @param \AppBundle\Entity\CreditsUsage $userCreditsUsage
     * @return User
     */
    public function addUserCreditsUsage(\AppBundle\Entity\CreditsUsage $userCreditsUsage)
    {
        $this->userCreditsUsage[] = $userCreditsUsage;

        return $this;
    }

    /**
     * Remove userCreditsUsage
     *
     * @param \AppBundle\Entity\CreditsUsage $userCreditsUsage
     */
    public function removeUserCreditsUsage(\AppBundle\Entity\CreditsUsage $userCreditsUsage)
    {
        $this->userCreditsUsage->removeElement($userCreditsUsage);
    }

    /**
     * Get userCreditsUsage
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUserCreditsUsage()
    {
        return $this->userCreditsUsage;
    }

    /**
     * Set lastCreditUpdate
     *
     * @param \DateTime $lastCreditUpdate
     * @return User
     */
    public function setLastCreditUpdate($lastCreditUpdate)
    {
        $this->lastCreditUpdate = $lastCreditUpdate;

        return $this;
    }

    /**
     * Get lastCreditUpdate
     *
     * @return \DateTime
     */
    public function getLastCreditUpdate()
    {
        return $this->lastCreditUpdate;
    }

    /**
     * Set deleted
     *
     * @param boolean $deleted
     * @return SubDomain
     */
    public function setDeleted($deleted)
    {
        $this->deleted = $deleted;

        return $this;
    }

    /**
     * Get deleted
     *
     * @return boolean
     */
    public function getDeleted()
    {
        return $this->deleted;
    }

    /**
     * Set deletedAt
     *
     * @param \DateTime $deletedAt
     * @return SubDomain
     */
    public function setDeletedAt($deletedAt)
    {
        $this->deletedAt = $deletedAt;

        return $this;
    }

    /**
     * Get deletedAt
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->deletedAt;
    }

    /**
     * Add modifiedSubscriptions
     *
     * @param \AppBundle\Entity\Order $modifiedSubscriptions
     * @return User
     */
    public function addModifiedSubscription(\AppBundle\Entity\Order $modifiedSubscriptions)
    {
        $this->modifiedSubscriptions[] = $modifiedSubscriptions;

        return $this;
    }

    /**
     * Remove modifiedSubscriptions
     *
     * @param \AppBundle\Entity\Order $modifiedSubscriptions
     */
    public function removeModifiedSubscription(\AppBundle\Entity\Order $modifiedSubscriptions)
    {
        $this->modifiedSubscriptions->removeElement($modifiedSubscriptions);
    }

    /**
     * Get modifiedSubscriptions
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getModifiedSubscriptions()
    {
        return $this->modifiedSubscriptions;
    }

    public function getRegisterSubscriptionId()
    {
        return $this->registerSubscriptionId;
    }

    public function getRegisterDomainIds()
    {
        return $this->registerDomainIds;
    }

    public function setRegisterSubscriptionId($registerSubscriptionId)
    {
        $this->registerSubscriptionId = $registerSubscriptionId;
    }

    public function setRegisterDomainIds($registerDomainIds)
    {
        $this->registerDomainIds = $registerDomainIds;
    }


    /**
     * Set profile
     *
     * @param \AppBundle\Entity\Profile $profile
     * @return User
     */
    public function setProfile(\AppBundle\Entity\Profile $profile = null)
    {
        $this->profile = $profile;
        $profile->setUser($this);

        return $this;
    }

    /**
     * Get profile
     *
     * @return \AppBundle\Entity\Profile
     */
    public function getProfile()
    {
        return $this->profile;
    }
}
